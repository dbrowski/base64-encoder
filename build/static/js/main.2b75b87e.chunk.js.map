{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxHeight","image","backgroundImage","backgroundRepeat","backgroundColor","backgroundSize","backgroundPosition","paper","display","height","maxWidth","paddingLeft","paddingRight","flexDirection","alignItems","justifyContent","color","avatar","margin","spacing","form","width","marginTop","submit","typography","fontSize","errorMessage","infoPaperContainer","overflow","info","padding","App","classes","inputRef","React","useRef","useState","anchorEl","setAnchorEl","encoded","setEncoded","error","setError","decoded","setDecoded","open","Boolean","id","undefined","copyTextToClipboard","text","navigator","clipboard","writeText","then","console","log","err","current","parentNode","focus","document","execCommand","fallbackCopyTextToClipboard","encode","Buffer","from","toString","container","component","className","item","xs","Paper","elevation","square","style","direction","flex","variant","align","noValidate","onSubmit","event","preventDefault","e","msg","message","split","currentTarget","required","fullWidth","label","name","value","autoFocus","maxRows","multiline","onChange","target","onClose","anchorOrigin","vertical","horizontal","transformOrigin","type","paddingBottom","readOnly","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mTAaMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,UAAW,SAEbC,MAAO,CACLC,gBACE,qGACFC,iBAAkB,YAClBC,gBAAiB,UACjBC,eAAgB,QAChBC,mBAAoB,SACpBN,UAAW,QAEbO,MAAO,CACLC,QAAS,OACTC,OAAQ,OACRC,SAAU,OACVC,YAAa,QACbC,aAAc,QACdC,cAAe,SACfC,WAAY,UACZC,eAAgB,aAChBC,MAAO,WAETC,OAAQ,CACNC,OAAQpB,EAAMqB,QAAQ,GACtBf,gBAAiB,WAEnBgB,KAAM,CACJC,MAAO,OACPC,UAAWxB,EAAMqB,QAAQ,IAE3BI,OAAQ,CACNnB,gBAAiB,UACjBc,OAAQpB,EAAMqB,QAAQ,EAAG,EAAG,IAE9BK,WAAY,CACVR,MAAO,UACPS,SAAU,QAEZC,aAAc,CACZV,MAAO,OAETW,mBAAoB,CAClB3B,UAAW,OACX4B,SAAU,QAEZC,KAAM,CACJpB,OAAQ,OACRT,UAAW,OACXgB,MAAO,UACPE,OAAQ,IACRY,QAAS,SAIE,SAASC,IAEtB,IAAMC,EAAUpC,IAGVqC,EAAWC,IAAMC,SAGvB,EAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAGMC,EAAOC,QAAQT,GACfU,EAAKF,EAAO,eAAYG,EAqDxBC,EAAsB,SAACC,GACtBC,UAAUC,UAIfD,UAAUC,UAAUC,UAAUH,GAAMI,MAClC,WACEC,QAAQC,IAAI,2CAEd,SAACC,GACC,KAAM,uCAxBwB,SAACP,GACnC,IAEEjB,EAASyB,QAAQC,WAAWC,QAETC,SAASC,YAAY,SAEtCP,QAAQC,IAAI,sDAEd,MAAOC,GACP,KAAM,uCAAyCA,GAM/CM,IAoBEC,EAAS,WACb,IAAMzB,EAAU0B,EAAOC,KAAKvB,EAAS,QAAQwB,SAAS,UACtD3B,EAAWD,IAGb,OACE,cAAC,IAAD,CAAM6B,WAAS,EAACC,UAAU,OAAOC,UAAWtC,EAAQjC,KAApD,SACE,cAAC,IAAD,CACEwE,MAAI,EACJH,WAAS,EACTI,GAAI,GACJH,UAAWI,IACXC,UAAW,EACXC,QAAM,EACN5D,eAAe,aACf6D,MAAO,CAAElE,SAAU,QARrB,SAUE,eAAC,IAAD,CACE6D,MAAI,EACJH,WAAS,EACTrD,eAAe,aACfuD,UAAWtC,EAAQzB,MACnBsE,UAAU,SALZ,UAOE,cAAC,IAAD,CACEN,MAAI,EACJH,WAAS,EACTI,GAAI,GACJzD,eAAe,SACf6D,MAAO,CACLE,KAAM,SANV,SASE,cAAC,IAAD,CAAQR,UAAWtC,EAAQf,OAA3B,SACE,cAAC,IAAD,QAGJ,cAAC,IAAD,CAAMsD,MAAI,EAACC,GAAI,GAAII,MAAO,CAAEE,KAAM,UAAlC,SACE,cAAC,IAAD,CAAYT,UAAU,KAAKU,QAAQ,KAAKC,MAAM,SAA9C,8BAIF,sBAAMV,UAAWtC,EAAQZ,KAAM6D,YAAU,EAACC,SAlH7B,SAACC,GACpBA,EAAMC,iBAEN,IACEpB,IACA,MAAOqB,GAEP,IAAIC,EAAMD,EAAEE,QAAQC,MAAM,MAAM,GAChCjC,QAAQd,MAAM6C,GACd5C,EAAS4C,GACThD,EAAY6C,EAAMM,iBAwGd,SACE,eAAC,IAAD,CACElB,MAAI,EACJH,WAAS,EACTS,UAAU,SACV/D,WAAW,UACX0D,GAAI,GACJI,MAAO,CAAEE,KAAM,aANjB,UAQE,eAAC,IAAD,CAAMP,MAAI,EAACC,GAAI,GAAII,MAAO,CAAEE,KAAM,aAAlC,UAEE,cAAC,IAAD,CACEC,QAAQ,WACR7D,OAAO,OACPwE,UAAQ,EACRC,WAAS,EACT5C,GAAG,UACH6C,MAAM,iBACNC,KAAK,UACLC,MAAOnD,EACPoD,WAAS,EACTC,QAAS,EACTC,WAAS,EACTC,SAvEY,SAACf,GAC3BA,EAAMC,iBACNxC,EAAWuC,EAAMgB,OAAOL,UAyEZ,cAAC,IAAD,CACE/C,GAAIA,EACJF,KAAMA,EACNR,SAAUA,EACV+D,QAlII,WAClB9D,EAAY,OAkIE+D,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,UAXhB,SAcE,cAAC,IAAD,CAAYjC,UAAWtC,EAAQN,aAA/B,SACGe,SAIP,cAAC,IAAD,CAAM8B,MAAI,EAACC,GAAI,GAAII,MAAO,CAAEE,KAAM,YAAlC,SACE,cAAC,IAAD,CACE2B,KAAK,SACLd,WAAS,EACTZ,QAAQ,YACR/D,MAAM,UACNsD,UAAWtC,EAAQT,OALrB,sBAUF,eAAC,IAAD,CAAM6C,WAAS,EAACG,MAAI,EAACC,GAAI,GAAII,MAAO,CAAE8B,cAAe,QAArD,UACE,cAAC,IAAD,CAAMnC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CACEO,QAAQ,WACR7D,OAAO,OACPwE,UAAQ,EACRC,WAAS,EACT5C,GAAG,UACH6C,MAAM,iBACNC,KAAK,UACLC,MAAOvD,EACPyD,QAAS,EACTC,WAAS,EACThE,SAAUA,EACV0E,UAAQ,MAGZ,cAAC,IAAD,CAAMpC,MAAI,EAACC,GAAI,EAAf,SACE,cAAC,IAAD,CACEoC,QA1KC,SAACzB,GAGlB,GAFAA,EAAMC,iBAEF7C,EACF,IACEU,EAAoBV,GACpB,MAAOkB,GACPf,EAASe,GACTnB,EAAY6C,EAAMM,oBAGpB/C,EAAS,kDACTJ,EAAY6C,EAAMM,gBA+JJ,aAAW,OACXzE,MAAM,UAHR,SAKE,cAAC,IAAD,0B,0IC7QL6F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxF,EAAA,EAAD,MAEF8B,SAAS2D,eAAe,SAM1BX,M","file":"static/js/main.2b75b87e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Popover from \"@material-ui/core/Popover\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxHeight: \"100vw\",\n  },\n  image: {\n    backgroundImage:\n      \"url(https://pingidentity.com/content/dam/ping-6-2-assets/open-graph-images/2019/P14C-Build-OG.png)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor: \"#576877\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    maxHeight: \"20vw\",\n  },\n  paper: {\n    display: \"flex\",\n    height: \"100%\",\n    maxWidth: \"100%\",\n    paddingLeft: \".5rem\",\n    paddingRight: \".5rem\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    justifyContent: \"flex-start\",\n    color: \"#2E4355\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: \"#2E4355\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(0),\n  },\n  submit: {\n    backgroundColor: \"#2E4355\",\n    margin: theme.spacing(3, 0, 2),\n  },\n  typography: {\n    color: \"#2E4355\",\n    fontSize: \"1rem\",\n  },\n  errorMessage: {\n    color: \"red\",\n  },\n  infoPaperContainer: {\n    maxHeight: \"100%\",\n    overflow: \"auto\",\n  },\n  info: {\n    height: \"100%\",\n    maxHeight: \"100%\",\n    color: \"#2E4355\",\n    margin: \"0\",\n    padding: \"0\",\n  },\n}));\n\nexport default function App() {\n  // Use the above styles.\n  const classes = useStyles();\n\n  // Ref to focus on textfield when using copy.\n  const inputRef = React.useRef();\n\n  // State variables and setters.\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [encoded, setEncoded] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [decoded, setDecoded] = useState(\"\");\n\n  // For popover error message.\n  const open = Boolean(anchorEl);\n  const id = open ? \"popover\" : undefined;\n\n  // Submit button.\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    try {\n      encode();\n    } catch (e) {\n      // Gets the reason for failure.\n      let msg = e.message.split(\". \")[1];\n      console.error(msg);\n      setError(msg);\n      setAnchorEl(event.currentTarget);\n    }\n  };\n\n  // Popover error message is closed.\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  // Copy encocded text to clipboard.\n  const handleCopy = (event) => {\n    event.preventDefault();\n\n    if (encoded) {\n      try {\n        copyTextToClipboard(encoded);\n      } catch (err) {\n        setError(err);\n        setAnchorEl(event.currentTarget);\n      }\n    } else {\n      setError(\"No text to copy. Try encoding something first.\");\n      setAnchorEl(event.currentTarget);\n    }\n  };\n\n  const fallbackCopyTextToClipboard = (text) => {\n    try {\n      // Focus document on textfield for decoded string\n      inputRef.current.parentNode.focus();\n\n      const successful = document.execCommand(\"copy\");\n      if (successful) {\n        console.log(\"Copying to clipboard was successful (execCommand)!\");\n      }\n    } catch (err) {\n      throw \"Failed to copy (using execCommand). \" + err;\n    }\n  };\n\n  const copyTextToClipboard = (text) => {\n    if (!navigator.clipboard) {\n      fallbackCopyTextToClipboard(text);\n      return;\n    }\n    navigator.clipboard.writeText(text).then(\n      () => {\n        console.log(\"Copying to clipboard was successful!\");\n      },\n      (err) => {\n        throw \"Failed to copy (using navigator).\";\n      }\n    );\n  };\n\n  // Text change for the encoded string.\n  const handleDecodedChange = (event) => {\n    event.preventDefault();\n    setDecoded(event.target.value);\n  };\n\n  // Encode method for translating the string into base64.\n  const encode = () => {\n    const encoded = Buffer.from(decoded, \"utf8\").toString(\"base64\");\n    setEncoded(encoded);\n  };\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <Grid\n        item\n        container\n        xs={12}\n        component={Paper}\n        elevation={6}\n        square\n        justifyContent=\"flex-start\"\n        style={{ maxWidth: \"100%\" }}\n      >\n        <Grid\n          item\n          container\n          justifyContent=\"flex-start\"\n          className={classes.paper}\n          direction=\"column\"\n        >\n          <Grid\n            item\n            container\n            xs={12}\n            justifyContent=\"center\"\n            style={{\n              flex: \"0 1 0\",\n            }}\n          >\n            <Avatar className={classes.avatar}>\n              <LockOpenIcon />\n            </Avatar>\n          </Grid>\n          <Grid item xs={12} style={{ flex: \"0 10 0\" }}>\n            <Typography component=\"h4\" variant=\"h4\" align=\"center\">\n              Base64 Encoder\n            </Typography>\n          </Grid>\n          <form className={classes.form} noValidate onSubmit={handleSubmit}>\n            <Grid\n              item\n              container\n              direction=\"column\"\n              alignItems=\"stretch\"\n              xs={12}\n              style={{ flex: \"10 0 auto\" }}\n            >\n              <Grid item xs={12} style={{ flex: \"10 0 auto\" }}>\n                {/* JWT input field */}\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"none\"\n                  required\n                  fullWidth\n                  id=\"decoded\"\n                  label=\"Decoded String\"\n                  name=\"Decoded\"\n                  value={decoded}\n                  autoFocus\n                  maxRows={4}\n                  multiline\n                  onChange={handleDecodedChange}\n                />\n\n                {/* Error Message for JWT String Decode */}\n                <Popover\n                  id={id}\n                  open={open}\n                  anchorEl={anchorEl}\n                  onClose={handleClose}\n                  anchorOrigin={{\n                    vertical: \"center\",\n                    horizontal: \"center\",\n                  }}\n                  transformOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"center\",\n                  }}\n                >\n                  <Typography className={classes.errorMessage}>\n                    {error}\n                  </Typography>\n                </Popover>\n              </Grid>\n              <Grid item xs={12} style={{ flex: \"1 0 auto\" }}>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.submit}\n                >\n                  Encode\n                </Button>\n              </Grid>\n              <Grid container item xs={12} style={{ paddingBottom: \"1rem\" }}>\n                <Grid item xs={11}>\n                  <TextField\n                    variant=\"outlined\"\n                    margin=\"none\"\n                    required\n                    fullWidth\n                    id=\"encoded\"\n                    label=\"Encoded String\"\n                    name=\"Encoded\"\n                    value={encoded}\n                    maxRows={4}\n                    multiline\n                    inputRef={inputRef}\n                    readOnly\n                  />\n                </Grid>\n                <Grid item xs={1}>\n                  <IconButton\n                    onClick={handleCopy}\n                    aria-label=\"copy\"\n                    color=\"inherit\"\n                  >\n                    <FileCopyIcon />\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </form>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}